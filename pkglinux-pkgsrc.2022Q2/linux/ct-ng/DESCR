
crosstool-NG aims at building toolchains. Toolchains are an essential component in a software development project. It will compile, assemble and link the code that is being developed. Some pieces of the toolchain will eventually end up in the resulting binaries: static libraries are but an example.

So, a toolchain is a very sensitive piece of software, as any bug in one of the components, or a poorly configured component, can lead to execution problems, ranging from poor performance, to applications ending unexpectedly, to misbehaving software (which more than often is hard to detect), to hardware damage, or even to human risks (which is more than regrettable).

Toolchains are made of different piece of software, each being quite complex and requiring specially crafted options to build and work seamlessly. This is usually not that easy, even in the not-so-trivial case of native toolchains. The work reaches a higher degree of complexity when it comes to cross-compilation, where it can become quite a nightmare â€¦

Some cross-toolchains exist on the internet, and can be used for general development, but they have a number of limitations:

    They can be general purpose, in that they are configured for the majority: no optimisation for your specific target.

    They can be prepared for a specific target and thus are not easy to use, nor optimised for, or even supporting your target.

    They often are using aging components (compiler, C library, etc.) not supporting special features of your shiny new processor.

On the other side, these toolchain offer some advantages:

    They are ready to use and quite easy to install and setup.

    They are proven if used by a wide community.

But once you want to get all the juice out of your specific hardware, you will want to build your own toolchain. This is where crosstool-NG comes into play.
