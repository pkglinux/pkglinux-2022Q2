#!/bin/bash -ue

<< MIT-LICENSE
Copyright (c) 2023 Jianjun Liu<jianjunliu@126.com> https://www.pkglinux.top

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
MIT-LICENSE

PKGLINUX_UPGRADE_VERBOSE=""
PKGLINUX_UPGRADE_PREFIX="$(readlink /pkg)"
PKGLINUX_UPGRADE_KVER="$(uname -r)"
PKGLINUX_UPGRADE_TAG="std"
PKGLINUX_UPGRADE_REPO=$(grep -v -e "^#" -e "^$" "/$PKGLINUX_UPGRADE_PREFIX/etc/pkgin/repositories.conf")
PKGLINUX_UPGRADE_REFIX=false
PKGLINUX_UPGRADE_KERNL=false
PKGLINUX_UPGRADE_FORCE=false


pkglinux-upgrade-usage()
{
	# Display Help
	echo "Roll over pkglinux to another installed prefix or upgrade current pkglinux with pkgin and does more."
	echo
	echo "Syntax: $0 [ -h|v|V|p|t|r|k|f ] [ --help|verbose|version|prefix|tag|refix|kernel|full|force ]"
	echo "options:"
	echo "h     Print this help."
	echo "v     Verbose mode."
	echo "V     Print software version and exit."
	echo "p     Set new prefix."
	echo "t     Sub tag."
	echo "r     Roll over to new prefix."
	echo "k     Load vmlinz and intramfs from /pkg/native/boot to /boot."
	echo "f     Force full upgrade i.e. update /pkglinux.sfs if installed."
	echo
}

echo Starting $0 $@

for arg in "$@"; do
	shift
	case "$arg" in
		"--help")	set -- "$@" "-h" ;;
		"--verbose")	set -- "$@" "-v" ;;
		"--version")	set -- "$@" "-V" ;;
		"--prefix")	set -- "$@" "-p" ;;
		"--tag")	set -- "$@" "-t" ;;
		"--refix")	set -- "$@" "-r" ;;
		"--kernel")	set -- "$@" "-k" ;;
		"--force")	set -- "$@" "-f" ;;
		"--full")	set -- "$@" "-f" ;;
		*)		set -- "$@" "$arg"
	esac
done

while getopts ':hvVp:t:rkf' OPTION; do
	case "$OPTION" in
		h)	# display usage
			pkglinux-upgrade-usage
			exit;;
		v)	# verbose mode
			PKGLINUX_UPGRADE_VERBOSE="-v"
			;;
		V)	# display version
			echo "2023.12"	
			exit;;
		p)	# set new prefix
			PKGLINUX_UPGRADE_PREFIX="$OPTARG" ;;
		t)	# subtag other than "min", like "gnome","kde", or "gnome+kde"
			PKGLINUX_UPGRADE_TAG="$OPTARG" ;;
		r)	# roll over.
			PKGLINUX_UPGRADE_REFIX=true ;;
		k)	# load kernel.
			PKGLINUX_UPGRADE_KERNL=true ;;
		f)	# force full.
			PKGLINUX_UPGRADE_FORCE=true ;;
		\?)	# Invalid option
	                echo "Error: Invalid option"
			exit;;
	esac
done

shift "$(($OPTIND -1))"

[ "$#" -gt 0 ] && pkglinux-upgrade-usage && exit 1;

[ ${UID} -ne 0 ] && echo "$0 will not be performed when not running as root" && exit 1;

pkgin up
pkgin ug -y
sync

if $PKGLINUX_UPGRADE_REFIX; then
	(cd / && ln $PKGLINUX_UPGRADE_VERBOSE -snf $PKGLINUX_UPGRADE_PREFIX pkg) 
fi

if $PKGLINUX_UPGRADE_KERNL; then
	rsync -av /pkg/native/boot/vmlinuz-$PKGLINUX_UPGRADE_KVER /boot/vmlinuz-$PKGLINUX_UPGRADE_KVER
	rsync -av /pkg/native/boot/initramfs-$PKGLINUX_UPGRADE_KVER /boot/initramfs-$PKGLINUX_UPGRADE_KVER
fi

sync

$PKGLINUX_UPGRADE_FORCE || exit 0

PKGLINUX_UPGRADE_REPO=$(grep -v -e "^#" -e "^$" "/$PKGLINUX_UPGRADE_PREFIX/etc/pkgin/repositories.conf")
PKGLINUX_UPGRADE_REPO_ROOT="$(dirname $(dirname $PKGLINUX_UPGRADE_REPO))/iso"
PKGLINUX_UPGRADE_SFSF="pkglinux-$PKGLINUX_UPGRADE_PREFIX-$PKGLINUX_UPGRADE_TAG.sfs"
PKGLINUX_UPGRADE_REPO_SFSF="$PKGLINUX_UPGRADE_REPO_ROOT/$PKGLINUX_UPGRADE_SFSF"
PKGLINUX_UPGRADE_REPO_HOST=$(echo "$PKGLINUX_UPGRADE_REPO" | sed -e 's|^[^/]*//||' -e 's|/.*$||' -e 's|:.*$||')

extract-domain() {
	local url="$1"
	local protocol_removed="${url#*://}"
	local path_removed="${protocol_removed%%/*}"
	local port_removed="${path_removed%%:*}"
	echo "$port_removed"
}

ip() {
	/sbin/ip route get 1.1.1.1 | head -1 | cut -d ' ' -f 7
}

if [ ! -d /sfs.root/ ]; then
	if [ -f /pkglinux.sfs ]; then
		PKGLINUX_UPGRADE_SFILE="$(realpath /pkglinux.sfs)"
	else
		PKGLINUX_UPGRADE_SFILE="$(cat /proc/cmdline| tr ' ' '\n' | grep sfs= | cut -d'=' -f2)/pkglinux.sfs"
	fi
	if [ -n "$PKGLINUX_UPGRADE_SFILE" ]; then
		if curl --head --silent --fail "$PKGLINUX_UPGRADE_REPO_SFSF" 2>&1> /dev/null; then
			echo "$PKGLINUX_UPGRADE_REPO_SFSF is available."
			if type -P rsync >/dev/null; then
				if [[ "$PKGLINUX_UPGRADE_REPO_HOST" == *"pkglinux.top" ]]; then
					rsync -ave 'ssh -p 1080' \
						repos@$PKGLINUX_UPGRADE_REPO_HOST:~/iso/$PKGLINUX_UPGRADE_SFSF \
						$PKGLINUX_UPGRADE_SFILE
				else
					rsync -ave \
						repos@$PKGLINUX_UPGRADE_REPO_HOST:~/iso/$PKGLINUX_UPGRADE_SFSF \
						$PKGLINUX_UPGRADE_SFILE
				fi
			elif curl --head --silent --fail "$PKGLINUX_UPGRADE_REPO_SFSF.zsync" 2>&1> /dev/null; then
				if command -v zsync >/dev/null; then
					echo zsync "$PKGLINUX_UPGRADE_REPO_SFSF".zsync -o $PKGLINUX_UPGRADE_SFILE
					zsync "$PKGLINUX_UPGRADE_REPO_SFSF".zsync -o $PKGLINUX_UPGRADE_SFILE
				else	
					curl $PKGLINUX_UPGRADE_REPO_SFSF > $PKGLINUX_UPGRADE_SFILE
				fi
			else	
				curl $PKGLINUX_UPGRADE_REPO_SFSF > $PKGLINUX_UPGRADE_SFILE
			fi
		else
			echo "$PKGLINUX_UPGRADE_REPO_SFSF is not available."
			exit 1
		fi
	fi
fi
sync
